{"path":"SDA23_handout6.pdf","text":"DFT IDFT IB Paper 6: Signal and Data Analysis Handout 6: The Discrete Fourier Transform S Godsill Signal Processing and Communications Laboratory, Engineering Department, Cambridge, UK Lent 2023 1 / 19 DFT IDFT Digital Sampling and the DTFT (revisited) −1.5 −1 −0.5 0 0.5 1 1.5 T 2T 3T 4T 5T 6T 7T 8T 9T f(t) f(T) f(2T) f(3T) f(4T) Figure 1: Digital sampling of a continuous waveform 2 / 19 DFT IDFT Given the sampled values of some signal f(t), i.e. {f(−∞), ...f(−T), f(0), f(+T), f(2T), ..., f(+∞)} the discrete time Fourier transform (DTFT) shows how to determine the frequency content: Fs(ω) = (1) See handout 5. (See below for examples of DTFT of a cosine wave and DTFT of a double exponential). 3 / 19 DFT IDFT f(t)=cos(ω ct) FT DTFT DISCRETE−TIME f(nT)=cos(ω cnT) t t ω ω F(ω) F s(ω) F s(ω)=1/T Σ m F(ω−mω 0) ω=+ω c ω=−ω c ω 0 2ω 0 −ω 0 −2ω 0 0 Figure 2: FT and DTFT of a cosine wave with frequency ωc 4 / 19 DFT IDFT f(t)=exp(−|t|) FT DTFT DISCRETE−TIME f(nT)=exp(−|nT|) t n ω ω F(ω) F s(ω) F s(ω)=1/T Σ m F(ω−mω 0) ω 0 2ω 0 −ω 0 −2ω 0 0 Figure 3: FT and DTFT of a double exponential 5 / 19 DFT IDFT This is fine in theory, but in practice there are two reasons why you can’t compute the DTFT of a signal: • We don’t have access to all of the data points from −∞ to +∞ (even if we did, the computing time would be infinite). • Fs(ω) is defined over the continuous range of frequencies from −∞ to +∞. Hence it is impossible to calculate and store Fs(ω) for all frequency values. The discrete Fourier transform (DFT) is a way to bypass these practical diﬀiculties: 6 / 19 DFT IDFT • Step 1: consider only data points which lie within some finite range, say t = 0, T, 2T, 3T, ..., (N − 1)T. The DTFT is modified to: Fs(ω) = N−1 ∑ n=0 f(nT)e−jnωT (2) This is equivalent to assuming that f(nT) = 0 outside the range n = 0, ..., N − 1. Provided we have ‘enough’ of the original continuous signal within the time window 0, ..., N − 1, the truncated DTFT will be similar to the full DTFT. 7 / 19 DFT IDFT • Step 2: Calculate only over a finite grid of frequencies. Since Fs(ω) is periodic with period ω0, there is no need to calculate any values beyond the Nyquist frequency. Since we are using N data points, it seems reasonable to evaluate Fs(ω) at N evenly spaced frequency values: ω = 0, ω0/N, 2ω0/N, ..., (N − 1)ω0/N: Fs(mω0/N) = N−1 ∑ n=0 = N−1 ∑ n=0 f(nT)e−jnm2π/N 8 / 19 DFT IDFT ω=0 ω=(N−1)ω 0/N ω 0 2ω 0 F 0=F s(0) F 1=F s(ω 0/N) F 2=F s(2ω 0/N) F s(ω) Figure 4: Sampling in frequency 9 / 19 DFT IDFT This is the Discrete Fourier Transform. Define Fm = Fs(mω0/N) and fn = f(nT) and we have: Fm = N−1 ∑ n=0 fne−jnm2π/N (3) 10 / 19 DFT IDFT Comments: • This is now a quantity which any computer can in principle evaluate for any observed signal. • Note that we can interpret component Fk as the frequency content of the signal at frequency . • The DFT is periodic, i.e. • For real signals 11 / 19 DFT IDFT Inverse Discrete Fourier Transform The grid of N frequency values chosen for the DFT is convenient in that the transform can be inverted from the N values of Fk. To derive the inverse DFT, first multiply the forward DFT by ej2πkm/N and then sum over m = 0 to N − 1: N−1 ∑ m=0 Fmej2πkm/N = (4) = (5) 12 / 19 DFT IDFT The inner summation over m is a Geometric Progression (GP), with factor ρ = ej2π k−n N . Hence we have: N−1 ∑ m=0 ej2πm k−n N = The second case above for k = n follows immediately because ∑N−1 m=0 ej0 = N. Equation (5) now becomes N−1 ∑ m=0 Fme j2πkm/N = (6) 13 / 19 DFT IDFT We therefore have an expression for the Inverse Discrete Fourier Transform (IDFT): fk = (7) To summarise: the expressions for the DFT and the IDFT of a sampled signal fn are: Fm = N−1 ∑ n=0 (8) fn = 1 N N−1 ∑ m=0 (9) 14 / 19 DFT IDFT Other considerations • Fast algorithms - particularly elegant and fast methods exist for computing the DFT, known generically as the Fast Fourier Transform, or FFT algorithms. The most well-known FFT algorithms are only used when N is a power of 2. However, other classes exist, such as for N a power of 4. 15 / 19 DFT IDFT • The effects of truncating a data sequence (ie taking a finite set of samples) might be to introduce some discontinuities at the start and end of the data frame. This will lead to spurious high frequency components in the Fourier transform. One way of avoiding this is to apply a window to our data sequence. A variety of window shapes can be used which better preserve the spectral information of the original (untruncated) signal and this is a large area of study known as ‘windowing’ or ‘tapering’. Because we know that multiplication in the time domain is equivalent to convolution in the frequency domain, we can quantify exactly what the effect on the spectrum is of applying this window function. 16 / 19 DFT IDFT Example: Let us now give an example of calculating a DFT. Consider the four sample values {fn} = {1, 2, 1, 0} Figure 5: Time samples fn 17 / 19 DFT IDFT We now want to calculate Fk for k = 0, 1, 2, 3. F0 = {foe−j2π(0×0)/4 + f1e−j2π(1×0)/4 + f2e−j2π(2×0)/4 + f3e−j2π(3×0)/4} = = F1 = {foe−j2π(0×1)/4 + f1e−j2π(1×1)/4 + f2e−j2π(2×1)/4 + f3e−j2π(3×1)/4} = = F2 = {foe−j2π(0×2)/4 + f1e−j2π(1×2)/4 + f2e−j2π(2×2)/4 + f3e−j2π(3×2)/4} = F3 = {foe−j2π(0×3)/4 + f1e−j2π(1×3)/4 + f2e−j2π(2×3)/4 + f3e−j2π(3×3)/4} = 18 / 19 DFT IDFT Therefore, the DFT is given by {Fk} = You can see from this that the property F∗ k = FN−k is satisfied. 19 / 19","libVersion":"0.2.4","langs":""}